<?xml version="1.0" encoding="UTF-8"?>
<web-app xmlns="http://xmlns.jcp.org/xml/ns/javaee"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://xmlns.jcp.org/xml/ns/javaee
                http://xmlns.jcp.org/xml/ns/javaee/web-app_3_1.xsd"
         version="3.1" >

  <!--    spring启动的监听器 优先级最高 监听器>过滤器>拦截器>Servlet-->
  <!--ContextLoaderListener监听器的作用就是启动Web容器时，
  自动装配ApplicationContext的配置信息。因为它实现了ServletContextListener这个接口，在web.xml配置这个监听器，
  启动容器时，就会默认执行它实现的方法。至于ApplicationContext.xml这个配置文件部署在哪 就在于context-param -->
  <listener>
<!--    <listener-class>org.springframework.web.context.ContextLoaderListener</listener-class>-->
        <listener-class>com.meeting.listener.WebAppContextListener</listener-class>
  </listener>

  <!--指定整个项目的上下文-->
  <context-param>
    <param-name>contextConfigLocation</param-name>
    <param-value>classpath:spring/applicationContext.xml</param-value>
  </context-param>

  <!--首先加载的是context-param配置的内容，而并不会去初始化servlet。只有进行了网站的跳转，
      经过了DispatcherServlet的导航的时候，才会初始化servlet，从而加载init-param中的内容。-->
  <!--context-param在所有的servlet中都能使用，init-param只能在当前的servlet中使用，如果不在当前的servlet中使用，取的值为null-->
  <!--前端控制器  没有这玩意 别想玩...-->
  <servlet>
    <servlet-name>applicationContext</servlet-name>
    <servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>

    <init-param>
      <param-name>contextConfigLocation</param-name>
      <param-value>classpath:spring/applicationContext.xml</param-value>
    </init-param>
  </servlet>
  <servlet-mapping>
    <servlet-name>applicationContext</servlet-name>
    <url-pattern>*.do</url-pattern>
  </servlet-mapping>

  <!--支持所有http请求 DELETE等等-->
  <filter>
    <filter-name>HiddenHttpMethodFilter</filter-name>
    <filter-class>org.springframework.web.filter.HiddenHttpMethodFilter</filter-class>
  </filter>
  <filter-mapping>
    <filter-name>HiddenHttpMethodFilter</filter-name>
    <url-pattern>/*</url-pattern>
  </filter-mapping>

  <!--过滤器是官方的  优先加载于拦截器  所以配置位置也自然的在web.xml里面-->
  <!--    字符编码以及全http请求支持过滤器添加-->
  <filter>
    <filter-name>characterEncodingFilter</filter-name>
    <filter-class>org.springframework.web.filter.CharacterEncodingFilter</filter-class>
    <!--指定字符编码-->
    <init-param>
      <param-name>encoding</param-name>
      <param-value>UTF-8</param-value>
    </init-param>
    <init-param>
      <param-name>forceRequestEncoding</param-name><!--请求-->
      <param-value>true</param-value>
    </init-param>
    <init-param>
      <param-name>forceResponseEncoding</param-name><!--响应-->
      <param-value>true</param-value>
    </init-param>
  </filter>
  <filter-mapping>
    <filter-name>characterEncodingFilter</filter-name>
    <url-pattern>/*</url-pattern>
  </filter-mapping>

</web-app>